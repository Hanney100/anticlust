// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _anticlustPackage_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// three_phase_search_dynamic_population_size
Rcpp::List three_phase_search_dynamic_population_size(Rcpp::NumericMatrix matrix, int N, int K, int upper_bound, int lower_bound, int popSize, int time_limit, double theta_max, double theta_min, int beta_min, int LMAX);
RcppExport SEXP _anticlustPackage_three_phase_search_dynamic_population_size(SEXP matrixSEXP, SEXP NSEXP, SEXP KSEXP, SEXP upper_boundSEXP, SEXP lower_boundSEXP, SEXP popSizeSEXP, SEXP time_limitSEXP, SEXP theta_maxSEXP, SEXP theta_minSEXP, SEXP beta_minSEXP, SEXP LMAXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< int >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< int >::type popSize(popSizeSEXP);
    Rcpp::traits::input_parameter< int >::type time_limit(time_limitSEXP);
    Rcpp::traits::input_parameter< double >::type theta_max(theta_maxSEXP);
    Rcpp::traits::input_parameter< double >::type theta_min(theta_minSEXP);
    Rcpp::traits::input_parameter< int >::type beta_min(beta_minSEXP);
    Rcpp::traits::input_parameter< int >::type LMAX(LMAXSEXP);
    rcpp_result_gen = Rcpp::wrap(three_phase_search_dynamic_population_size(matrix, N, K, upper_bound, lower_bound, popSize, time_limit, theta_max, theta_min, beta_min, LMAX));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_anticlustPackage_rcpp_hello_world", (DL_FUNC) &_anticlustPackage_rcpp_hello_world, 0},
    {"_anticlustPackage_three_phase_search_dynamic_population_size", (DL_FUNC) &_anticlustPackage_three_phase_search_dynamic_population_size, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_anticlustPackage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
