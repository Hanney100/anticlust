% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrapper-clustering.R
\name{balanced_clustering}
\alias{balanced_clustering}
\title{Create balanced clusters}
\source{
The heuristic method was originally developed and contributed by m.eik michalke.
It was later rewritten by Martin Papenberg, who also implemented the exact integer linear
programming method.
}
\usage{
balanced_clustering(x, K, method = "heuristic")
}
\arguments{
\item{x}{The data input. Can be one of two structures: (1) A data matrix
where rows correspond to elements and columns correspond to
features (a single numeric feature can be passed as a vector). (2)
An N x N matrix dissimilarity matrix; can be an object of class
\code{dist} (e.g., returned by \code{\link{dist}} or
\code{\link{as.dist}}) or a \code{matrix} where the entries of
the upper and lower triangular matrix represent the pairwise
dissimilarities.}

\item{K}{How many clusters should be created.}

\item{method}{One of "heuristic" or "ilp". See details.}
}
\value{
An integer vector representing the cluster affiliation of 
    each data point
}
\description{
Create balanced clusters
}
\details{
This function partitions a set of elements into K equal sized
clusters. The function offers two methods, a heuristic method and an
exact method. The heuristic (\code{method = "heuristic"}) computes
the centroid of all available elements and identifies the element
farthest to it. If the input is a dissimilarity matrix, the most
central element acts as the centroid. The farthest element is
clustered with its \code{(N/K) - 1} nearest neighbours. From the remaining
elements, the element farthest to the centroid is selected and again
clustered with its \code{(N/K) - 1} neighbours; the procedure is repeated
until all elements are part of a cluster. 

An exact method (\code{method = "ilp"}) can be used to solve cluster
editing optimally. The cluster editing objective minimizes the sum
of pairwise distances within clusters. If the argument
\code{features} is passed, the Euclidean distance is computed by
default as the basic unit of the cluster editing objective. If
another distance measure is preferred, users may pass a self-computed
dissimiliarity matrix via the argument \code{distances}. The optimal
cluster editing objective can be found via integer linear
programming. To obtain an optimal solution for balanced cluster
editing, a linear programming solver must be installed and usable
from R. The `anticlust` package supports the open source GNU linear
programming kit (called from the package \code{Rglpk}) and the
commercial solvers gurobi (called from the package \code{gurobi}) and
IBM CPLEX (called from the package \code{Rcplex}). A license is
needed to use one of the commercial solvers.
}
\examples{

# Cluster a data set and visualize results
N <- 1000
lds <- data.frame(f1 = rnorm(N), f2 = rnorm(N))
cl <- balanced_clustering(lds, K = 10)
plot_clusters(lds, clusters = cl)

# Repeat using a distance matrix as input
cl2 <- balanced_clustering(dist(lds), K = 10)
plot_clusters(lds, clusters = cl2)

}
\references{
Grötschel, M., & Wakabayashi, Y. (1989). A cutting plane algorithm
for a clustering problem. Mathematical Programming, 45, 59–96.
}
\author{
Martin Papenberg \email{martin.papenberg@hhu.de}

m.eik michalke \email{meik.michalke@hhu.de}
}
