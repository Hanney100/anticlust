% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bicriterion_iterated_local_search_call.R
\name{bicriterion_anticlustering}
\alias{bicriterion_anticlustering}
\title{Bicriterion iterated local search heuristic}
\usage{
bicriterion_anticlustering(
  x,
  K,
  R = NULL,
  W = c(1e-06, 1e-05, 1e-04, 0.001, 0.01, 0.1, 0.5, 0.99, 0.999, 0.999999),
  Xi = c(0.05, 0.1)
)
}
\arguments{
\item{x}{The data input. Can be one of two structures: (1) A
feature matrix where rows correspond to elements and columns
correspond to variables (a single numeric variable can be
passed as a vector). (2) An N x N matrix dissimilarity matrix;
can be an object of class \code{dist} (e.g., returned by
\code{\link{dist}} or \code{\link{as.dist}}) or a \code{matrix}
where the entries of the upper and lower triangular matrix
represent pairwise dissimilarities.}

\item{K}{How many anticlusters should be created. Alternatively:
(a) A vector describing the size of each group, or (b) a vector
of length \code{nrow(x)} describing how elements are assigned
to anticlusters before the optimization starts.}

\item{R}{The desired number of restarts for the BILS algorithm.}

\item{W}{Optional argument, a vector of possible weights for
dispersion in the bicriterion (0 <= W <= 1)}

\item{Xi}{Optional argument, a vector for the neighborhood size
range [xi1, xi2] in percent.}
}
\value{
A \code{matrix} of anticlustering partitions (i.e.,
    approximated the pareto set). Each row corresponds to a
    partition, each column corresponds to an input element.
}
\description{
This function implements the Bicriterion iterated local search heuristic (BILS) for
anticlustering by
Brusco, Cradit, and Steinley (2020). The description of the
algorithm is given in Section 3 of their paper (in particular see
the pseudocode in Figure 2).
}
\details{
The bicriterion algorithm by Brusco, Cradit, and Steinley (2020)
    aims to simultaneously optimize the
    \code{\link{diversity_objective}} and the
    \code{\link{dispersion_objective}}, by returning a list of
    partitions that approximate the pareto set of efficient
    solutions.

The arguments \code{R}, \code{W} and \code{Xi} are named for
    consistency with Brusco et al. (2020). The argument \code{R}
    denotes the number of restarts of the search heuristic. The
    argument \code{W} denotes the possible weights given to the
    diversity criterion in a given run of the search heuristic. In
    each run, the a weight is randomly selected from the vector
    \code{W}. We use as default the values that Brusco et al. used
    in their analyses. All values in \code{w} have to be in [0, 1];
    larger values indicate that diversity is more important,
    whereas smaller values indicate that dispersion is more
    important; \code{w = .5} implies the same weight for both
    criteria. The argument \code{Xi} is the probability that an
    element is swapped during the iterated local search
    (specifically, Xi has to be a vector of length 2, denoting the
    range of a uniform distribution from which the probability of
    swapping).
}
\examples{
# Generate some random data
M <- 3
N <- 80
K <- 4
data <- matrix(rnorm(N * M), ncol = M)
# Use bicriterion algorithm, 200 repetitions
pareto_set <- bicriterion_anticlustering(data, K = K, R = 200)
# Compute objectives for all solutions
diversities_pareto <- apply(pareto_set, 1, diversity_objective, x = data)
dispersions_pareto <- apply(pareto_set, 1, dispersion_objective, x = data)
# Plot the pareto set
plot(diversities_pareto, dispersions_pareto, col = "blue", cex = 2, pch = 19)

# Get some random solutions for comparison!
rnd_solutions <- t(replicate(n = 200, sample(pareto_set[1, ])))

# Compute all objectives for random solutions
diversities_rnd <- apply(rnd_solutions, 1, diversity_objective, x = data)
dispersions_rnd <- apply(rnd_solutions, 1, dispersion_objective, x = data)

# Plot random solutions and pareto set. Random solutions are far away 
# from the good solutions in pareto set
plot(
  diversities_rnd, dispersions_rnd, 
  col = "red",
  ylim = c(
    min(dispersions_rnd, dispersions_pareto), 
    max(dispersions_rnd, dispersions_pareto)
  ),
  xlim = c(
    min(diversities_rnd, diversities_pareto), 
    max(diversities_rnd, diversities_pareto)
  )
)
points(diversities_pareto, dispersions_pareto, col = "blue", cex = 2, pch = 19)

}
\references{
Brusco, M. J., Cradit, J. D., & Steinley, D. (2020). Combining
diversity and dispersion criteria for anticlustering: A bicriterion
approach. British Journal of Mathematical and Statistical
Psychology, 73, 275-396. https://doi.org/10.1111/bmsp.12186
}
\author{
Martin Breuer \email{M.Breuer@hhu.de}, Martin Papenberg
    \email{martin.papenberg@hhu.de}
}
